import { useAppSelector, useAppDispatch } from '../../../../hooks/useAppSelectorAndDispatch';
import getChatByIdThunk from '../../../../redux/thunks/getChatByIdThunk';
import InfiniteScroll from 'react-infinite-scroll-component';
import Message from './Message';
import GenericMessage from './GenericMessage';
import Loading from '../../../reusable/Loading';

export const DisplayMessages = () => {
  const dispatch = useAppDispatch();
  const isLoading = useAppSelector((state) => state.currentChat.isLoading);
  const currentChat = useAppSelector((state) => state.currentChat);
  const currentUser = useAppSelector((state) => state.loggedInUser);

  const loadMore = () => {
    if (!isLoading) dispatch(getChatByIdThunk(currentChat.chatId!));
  };

  return (
    <InfiniteScroll
      className="scrollable"
      height="calc(100vh - 180px)"
      inverse={true}
      dataLength={currentChat.messages.length}
      next={loadMore}
      hasMore={currentChat.hasMoreMessages}
      loader={<Loading />}
      endMessage={
        <p className="text-center text-muted small">Beginning of the chat</p>
      }
    >
      <div className="messages-container">
        {currentChat.messages.map((message) => {
          const isSender = currentUser.id === message.senderId;
          const isGeneric = message.isAutogenerated || message.isDeleted;
          return (
            <div
              key={message.messageId}
              className={`message-row ${isSender ? 'message-row--sender' : ''}`}
            >
              {isGeneric ? (
                <GenericMessage message={message} />
              ) : (
                <Message message={message} />
              )}
            </div>
          );
        })}
      </div>
    </InfiniteScroll>
  );
};
