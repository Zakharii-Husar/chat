import { useAppSelector, useAppDispatch } from '../../../../hooks/useAppSelectorAndDispatch';
import getChatByIdThunk from '../../../../redux/thunks/getChatByIdThunk';
import InfiniteScroll from 'react-infinite-scroll-component';
import Message from './Message';
import GenericMessage from './GenericMessage';
import Loading from '../../../reusable/Loading';

export const DisplayMessages = () => {
  const dispatch = useAppDispatch();
  const isLoading = useAppSelector((state) => state.currentChat.isLoading);
  const currentChat = useAppSelector((state) => state.currentChat);
  const currentUser = useAppSelector((state) => state.loggedInUser);

  const loadMore = () => {
    if (!isLoading) dispatch(getChatByIdThunk(currentChat.chatId!));
  };

  const handleScroll = (e: any) => {
    const element = e.target;
    const endLine = element.querySelector('.messages-end-line');
    if (!endLine) return;
    
    const isAtBottom = element.scrollHeight - element.scrollTop === element.clientHeight;
    if (isAtBottom) {
      endLine.classList.add('bounce');
      setTimeout(() => endLine.classList.remove('bounce'), 500);
    }
  };

  return (
    <div className="messages-container scrollable" onScroll={handleScroll}>
      <InfiniteScroll
        className="messages-container"
        dataLength={currentChat.messages.length}
        next={loadMore}
        hasMore={currentChat.hasMoreMessages}
        loader={<Loading />}
        inverse={true}
        endMessage={<div className="messages-end-line" />}
      >
        {currentChat.messages.map((message) => {
          const isSender = currentUser.id === message.senderId;
          const isGeneric = message.isAutogenerated || message.isDeleted;
          return (
            <div
              key={message.messageId}
              className={`message-row ${isSender ? 'message-row--sender' : ''}`}
            >
              {isGeneric ? (
                <GenericMessage message={message} />
              ) : (
                <Message message={message} />
              )}
            </div>
          );
        })}
      </InfiniteScroll>
    </div>
  );
};
