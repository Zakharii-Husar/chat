import { Virtuoso } from 'react-virtuoso';
import { useCallback, useState } from 'react';
import { useAppSelector, useAppDispatch } from '../../../../hooks/useAppSelectorAndDispatch';
import getChatByIdThunk from '../../../../redux/thunks/getChatByIdThunk';
import Message from './Message';
import GenericMessage from './GenericMessage';
import Loading from '../../../reusable/Loading';
import './DisplayMessages.scss';

export const DisplayMessages = () => {
  const dispatch = useAppDispatch();
  const isLoading = useAppSelector((state) => state.currentChat.isLoading);
  const currentChat = useAppSelector((state) => state.currentChat);
  const currentUser = useAppSelector((state) => state.loggedInUser);
  const [isLoadingMore, setIsLoadingMore] = useState(false);

  const loadMore = useCallback(async () => {
    console.log('Loading more mess...', {
      isLoadingMore,
      hasMore: currentChat.hasMoreMessages,
      messagesCount: currentChat.messages.length
    });

    if (!isLoadingMore && currentChat.chatId && currentChat.hasMoreMessages) {
      try {
        setIsLoadingMore(true);
        await dispatch(getChatByIdThunk(currentChat.chatId));
      } finally {
        setIsLoadingMore(false);
      }
    }
  }, [dispatch, isLoadingMore, currentChat.chatId, currentChat.hasMoreMessages]);

  if (isLoading && !currentChat.messages?.length) {
    return <Loading />;
  }

  if (!currentChat.messages?.length) {
    return (
      <div className="messages-scroll-container">
        <div className="messages-list empty">No messages yet</div>
      </div>
    );
  }

  return (
    <div className="messages-scroll-container">
      <Virtuoso
        className="scrollable"
        style={{ height: '100%' }}
        data={currentChat.messages}
        itemContent={(index) => {
          const message = currentChat.messages[index];
          if (!message) return null;

          const isSender = currentUser.id === message.senderId;
          const isGeneric = message.isAutogenerated || message.isDeleted;

          return (
            <div className={`message-row ${isSender ? 'message-row--sender' : ''}`}>
              {isGeneric ? (
                <GenericMessage message={message} />
              ) : (
                <Message message={message} />
              )}
            </div>
          );
        }}
        initialTopMostItemIndex={currentChat.messages.length - 1}
        reversed={true}
        startReached={()=>loadMore()}
      />
    </div>
  );
};
