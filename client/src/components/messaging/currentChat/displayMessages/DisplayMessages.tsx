import { Virtuoso } from 'react-virtuoso';
import { useCallback, useState } from 'react';
import { useAppSelector, useAppDispatch } from '../../../../hooks/useAppSelectorAndDispatch';
import getChatByIdThunk from '../../../../redux/thunks/getChatByIdThunk';
import Message from './Message';
import GenericMessage from './GenericMessage';
import { SkeletonLoader } from '../../../reusable/SkeletonLoader';
import './DisplayMessages.scss';

export const DisplayMessages = () => {
  const dispatch = useAppDispatch();
  const isLoading = useAppSelector((state) => state.currentChat.isLoading);
  const currentChat = useAppSelector((state) => state.currentChat);
  const currentUser = useAppSelector((state) => state.loggedInUser);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const firstItemIndex = 10000 - (currentChat.messages?.length || 0);

  // Load more messages when scrolling to the top
  const loadMore = useCallback(async () => {
    if (!isLoadingMore && currentChat.chatId && currentChat.hasMoreMessages) {
      try {
        setIsLoadingMore(true);
        await dispatch(getChatByIdThunk(currentChat.chatId));
      } finally {
        setIsLoadingMore(false);
      }
    }
  }, [dispatch, isLoadingMore, currentChat.chatId, currentChat.hasMoreMessages]);

  // Show skeleton loader if messages are being fetched for the first time
  if (isLoading && !currentChat.messages?.length) {
    return (
      <div className="messages-scroll-container">
        <div className="messages-list">
          <SkeletonLoader type="messageItem" count={5} />
        </div>
      </div>
    );
  }

  // Show empty state if there are no messages
  if (!currentChat.messages?.length) {
    return (
      <div className="messages-scroll-container">
        <div className="messages-list empty">No messages yet</div>
      </div>
    );
  }

  // Function to render each message
  
    const ItemContent = (index: number) => {
      if (!currentChat?.messages) return null;
  
      // Calculate the correct index for the reversed list
      // The Virtuoso index starts at `firstItemIndex`, so subtract it to get the array index.
      const messageIndex = index - firstItemIndex;
      const message = currentChat.messages[messageIndex];
  
      if (!message) return <SkeletonLoader type="messageItem" count={1} />;
  
      const isSender = currentUser.id === message.senderId;
      const isGeneric = message.isAutogenerated || message.isDeleted;
  
      return (
        <div className={`message-row ${isSender ? 'message-row--sender' : ''}`}>
          {isGeneric ? (
            <GenericMessage message={message} />
          ) : (
            <Message message={message} />
          )}
        </div>
      );
    };
  
    return (
      <div className="messages-scroll-container">
        {currentChat?.messages?.length > 0 && (
          <Virtuoso
            itemContent={ItemContent}
            className="scrollable"
            style={{ height: '100%' }}
            totalCount={currentChat.messages.length}
            startReached={loadMore}
            reversed={true} // Reverse the list
            firstItemIndex={firstItemIndex} // Start indexing from a large number
            initialTopMostItemIndex={currentChat.messages.length} // Start at the most recent message (bottom of the list)
            followOutput="smooth" // Automatically scroll to the bottom when new messages are added
          />
        )}
      </div>
    );
  };